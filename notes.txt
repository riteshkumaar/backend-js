* terminal - npm init -> npm initialises the repository
* a json file is now formed 


* make a readme.md file 

* git init -> git respository is now initialised and you are now tracking all files
* git add . -> adds all the files to repository
* git commit -m "add initial files for backend"
* right now we are in the master branch 
* Now got to github and create a new repository
* now come back to terminal here and do ' git branch -M main' 
* the above command changes the current branch to main -> this is done to match github standards
* git remote add origin -> which tells the repository where to actually push the files
* git push -u origin main -> this is the final step

** in case of any errors, git remote remove origin and then set remote again and then push it 

*now make a public folder and add a temp folder 
* git status -> it only tracks folders so nothing is visible for now 
* now make a .gitkeep file inside the temp folder 
-> now I can track these folders as well

* now move out of public and make a git ignore file then head to gitignore on chrome -> git ignore.io 
then type node and copy paste that full content in the .gitignore files which will not be pushed
* the env variables are picked from the system to keep them secure so make a .env file now
* make another folder src in root
* touch idx.js -> makes a file in your correct directory as idx.js
* in package.json set type to module

** now we will use a utility called nodemon which restarts the server everytime we make any changes
*dev dependencies -> used only during development and not in production
* npm i -D nodemon
* go to package.json in scripts, add /*   "dev": "nodemon src/index.js"   */
* git status
* git add .
* git commit -m "setup project files"
* git push 
* in src>mkdir controller dB middlewares(to check for anything)

now go to the icon on the left below search where you find, changes add them and then commit and push from ...
* now install -D prettier so that no conflicts arise in git for multiple people
 * now make a .prettierrc to make it's configurations
 * inside it 
 {
    "singleQuote": false,
    "bracketSpacing": true,
    "tabWidth": 2,
    "semi": true,
    "trailingComma": "es5"
}


*****
Go to Mongodb and make a cluster
after that, come to .env -> assign a port let's say 4000 and thereafter 
add the mongodb url 
remove the ending slash in url

export your DB using a name and export it in constants.js


** We will learn to connect to Database
-> 3 packages are needed -> dotenv, mongoose and express
-> install all using -> npm i 

-> mongoose has to be imported now as it is the one to connect to Database
-> Database should always be wrapped in try-catch or promises
-> Database is always in another continent hence always takes time -> async await lagana pdega

-> now import mongoose in index.js
-> uske baad index.js mei jaake async lgao aur usmei bhi try catch laga do 
import mongoose from "mongoose";
import { DB_Name } from "./constants";
(async () => {
    try {
        await mongoose.connect(`${process.env.MONGODB_URL}/${DB_Name}`)
        app.on("error" , (error) => {
            console.log("Application isn't able to talk to database: ", error);
            throw error;
        })
    app.listen(process.env.PORT, () => 
    {
        console.log(`App is listening on ${process.env.PORT}`);
        
    })
    } catch (error) {
        console.log("Error occured, error");
        throw error;
    }
})
* -. This is one approach 


-> This is another approach


-> now go to DB and make an index.js file in it
-> import mongoose from "mongoose";
import { DB_Name } from "../constants";